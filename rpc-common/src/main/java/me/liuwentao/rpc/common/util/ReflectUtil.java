package me.liuwentao.rpc.common.util;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.io.File;import java.io.FileFilter;import java.io.IOException;import java.net.JarURLConnection;import java.net.URL;import java.net.URLDecoder;import java.util.Enumeration;import java.util.LinkedHashSet;import java.util.Set;import java.util.jar.JarEntry;import java.util.jar.JarFile;/** * Created by liuwentao on 2021/7/12 10:37 */public class ReflectUtil {    private static final Logger logger = LoggerFactory.getLogger(ReflectUtil.class);    public static String getStackTrace() {        StackTraceElement[] stack = new Throwable().getStackTrace();        return stack[stack.length - 1].getClassName();    }    // 通过包名获取该包下面的所有class    public static Set<Class<?>> getClass(String packageName) {        Set<Class<?>> classes = new LinkedHashSet<>();        Boolean recursive = true;        String packageDirName = packageName.replace('.', '/');        // 获取资源        Enumeration<URL> dirs = null;        try {            dirs = Thread.currentThread().getContextClassLoader().getResources(packageDirName);            while (dirs.hasMoreElements()) {                // 获取下一个元素                URL url = dirs.nextElement();                logger.info("url:" + url.toString());                // 协议名称                String protocol = url.getProtocol();                // 如果是文件形式保存在服务器上                if ("file".equals(protocol)) {                    // 获取包的物理路径                    String filePath = URLDecoder.decode(url.getFile(), "UTF-8");                    // 以文件的方式扫描整个包下的文件，并添加到集合中                    logger.info("该资源以文件形式，当前资源（文件）路径是：" + filePath);                    findAndAddClassesInPackageByFile(packageName, filePath, recursive, classes);                } else if ("jar".equals(protocol)) {                    logger.info("以jar形式");                    // 如果是jar包文件                    JarFile jar;                    try {                        jar = ((JarURLConnection)url.openConnection()).getJarFile();                        // 从此jar包 得到一个枚举类                        Enumeration<JarEntry> entries = jar.entries();                        // 同样循环 获取文件                        while (entries.hasMoreElements()) {                            // 获取jar里面的一个实体，可以是目录或者jar包里面的其它文件，比如META-INF等文件                            JarEntry entry = entries.nextElement();                            String name = entry.getName();                            if (name.charAt(0) == '/') {                                name = name.substring(1);                            }                            // 如果前半部分和定义的包名相同                            if (name.startsWith(packageDirName)) {                                int idx = name.lastIndexOf('/');                                // 如果以"/"结尾 那就是一个包                                if (idx != -1) {                                    // 获取包名 把"/"替换成"."                                    packageName = name.substring(0, idx).replace('/', '.');                                }                                // 如果可以迭代下去 并且是一个包                                if (idx != -1 || recursive) {                                    // 如果是一个.class文件 而且不是目录                                    if (name.endsWith(".class") && !entry.isDirectory()) {                                        // 去掉.class 获取真正的类名                                        String className = name.substring(packageName.length() + 1, name.length() - 6);                                        try {                                            // 添加到classes                                            classes.add(Class.forName(packageName + '.' + className));                                        } catch (ClassNotFoundException e) {                                            logger.error("添加用户自定义视图类错误 找不到此类的.class文件", e);                                        }                                    }                                }                            }                        }                    } catch (IOException e) {                        logger.error("在扫描用户自定义视图时从jar包获取文件出错", e);                    }                }            }        } catch (IOException e) {            e.printStackTrace();        }        return classes;    }    private static void findAndAddClassesInPackageByFile(String packageName, String packagePath, Boolean recursive, Set<Class<?>> classes) {        // 获取此包的目录 建立一个File        File dir = new File(packagePath);        // 如果不存在或者 也不是目录就直接返回        if (!dir.exists() || !dir.isDirectory()) {            logger.warn("用户定义包名 " + packageName + " 下没有任何文件");            return;        }        // 如果存在 就获取包下的所有文件 包括目录        File[] dirfiles = dir.listFiles(new FileFilter() {            // 自定义过滤规则 如果可以循环(包含子目录) 或则是以.class结尾的文件(编译好的java类文件)            public boolean accept(File file) {                return (recursive && file.isDirectory())                        || (file.getName().endsWith(".class"));            }        });        // 循环所有文件        for (File file : dirfiles) {            // 如果是目录 则继续扫描            if (file.isDirectory()) {                findAndAddClassesInPackageByFile(packageName + "."                                + file.getName(), file.getAbsolutePath(), recursive,                        classes);            } else {                // 如果是java类文件 去掉后面的.class 只留下类名                String className = file.getName().substring(0,                        file.getName().length() - 6);                try {                    // 添加到集合中去                    //classes.add(Class.forName(packageName + '.' + className));                    //经过回复同学的提醒，这里用forName有一些不好，会触发static方法，没有使用classLoader的load干净                    classes.add(Thread.currentThread().getContextClassLoader().loadClass(packageName + '.' + className));                } catch (ClassNotFoundException e) {                    // log.error("添加用户自定义视图类错误 找不到此类的.class文件");                    e.printStackTrace();                }            }        }    }}