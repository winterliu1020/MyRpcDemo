package me.liuwentao.rpc.common.util;import com.alibaba.nacos.api.exception.NacosException;import com.alibaba.nacos.api.naming.NamingFactory;import com.alibaba.nacos.api.naming.NamingService;import com.alibaba.nacos.api.naming.pojo.Instance;import me.liuwentao.rpc.common.Enumeration.RpcError;import me.liuwentao.rpc.common.Exception.RpcException;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.net.InetSocketAddress;import java.rmi.Naming;import java.util.HashSet;import java.util.Iterator;import java.util.List;/** * Created by liuwentao on 2021/7/5 11:15 * * 把连接与管理nacos连接放到这里：注册和注销 * */public class NacosUtil {    private static final Logger logger = LoggerFactory.getLogger(NacosUtil.class);    private static final NamingService namingService;    private static final String REGISTRY_ADDRESS = "127.0.0.1:8848";    private static InetSocketAddress inetSocketAddress;    private static final HashSet<String> set = new HashSet<>(); // 注册中心中保存所有注册的服务名    static {        namingService = getNacosNamingService();    }    public static NamingService getNacosNamingService() {        try {            return NamingFactory.createNamingService(REGISTRY_ADDRESS);        } catch (NacosException e) {            logger.error("连接到nacos时发生错误，", e);            throw new RpcException(RpcError.FAILED_TO_CONNECTED_TO_SERVICE_REGISTRY);        }    }    // registryService    public static void registryService(String interfaceName, InetSocketAddress inetSocketAddress) {        try {            namingService.registerInstance(interfaceName, inetSocketAddress.getHostName(), inetSocketAddress.getPort());            NacosUtil.inetSocketAddress = inetSocketAddress;            set.add(interfaceName);        } catch (NacosException e) {            logger.error("向nacos远程注册中心注册服务时发生错误");        }    }    // 远程注册中心还可以提供更具interfaceName获取所有的提供这个服务的ip, host；    public static List<Instance> getAllInstance(String interfaceName) {        try {            return namingService.getAllInstances(interfaceName);        } catch (NacosException e) {            logger.error("获取nacos服务发生错误，", e);        }        return null;    }    // 注销所有的服务    public static void clearRegistry() {        if (!set.isEmpty() && inetSocketAddress != null) {            // 用迭代器，将注册中心中所有服务都注销            Iterator<String> iterable = set.iterator();            while (iterable.hasNext()) {                String interfaceName = iterable.next();                set.remove(interfaceName);                try {                    namingService.deregisterInstance(interfaceName, inetSocketAddress.getHostName(), inetSocketAddress.getPort());                } catch (NacosException e) {                    logger.error("注销服务{}发生错误", interfaceName, e);                }            }        }    }}