package me.liuwentao.rpc.core.transport.Socket.util;import me.liuwentao.rpc.common.Entity.RpcRequest;import me.liuwentao.rpc.common.Enumeration.PackageType;import me.liuwentao.rpc.core.Serializer.CommonSerializer;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.io.IOException;import java.io.OutputStream;import java.util.Arrays;/** * Created by liuwentao on 2021/7/1 20:18 */public class ObjectWriter {    private static final Logger logger = LoggerFactory.getLogger(ObjectWriter.class);    private static final int MAGIC_NUMBER = 0xCAFEBABE;    public static void writeObject(OutputStream outputStream, Object object, CommonSerializer serializer) throws IOException {        // 还是写规定的协议数据包格式        // 写魔数        outputStream.write(intToBytes(MAGIC_NUMBER));        // 数据包类型        if (object instanceof RpcRequest) {            outputStream.write(intToBytes(PackageType.REQUEST_PACKAGE.getCode()));        } else {            outputStream.write(intToBytes(PackageType.RESPONSE_PACKAGE.getCode()));        }        // 写序列化类型        outputStream.write(intToBytes(serializer.getCode()));        // 数据长度        byte[] bytes = serializer.serializer(object);        outputStream.write(intToBytes(bytes.length));        // 数据字节流        outputStream.write(bytes);    }    public static byte[] intToBytes(int num) {        byte[] bytes = new byte[4];        bytes[0] = (byte) ((num >> 24) & 0xFF); // 最高位        bytes[1] = (byte) ((num >> 16) & 0xFF);        bytes[2] = (byte) ((num >> 8) & 0xFF);        bytes[3] = (byte) (num & 0xFF);        return bytes;    }}