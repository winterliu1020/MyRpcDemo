package me.liuwentao.rpc.core.transport;import me.liuwentao.rpc.common.Enumeration.RpcError;import me.liuwentao.rpc.common.Exception.RpcException;import me.liuwentao.rpc.common.util.ReflectUtil;import me.liuwentao.rpc.core.Provider.ServiceProvider;import me.liuwentao.rpc.core.Registry.ServiceRegistry;import me.liuwentao.rpc.core.annotation.Service;import me.liuwentao.rpc.core.annotation.ServiceScan;import me.liuwentao.rpc.core.config.RpcServiceConfig;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.net.InetSocketAddress;import java.util.Set;/** * Created by liuwentao on 2021/7/12 11:48 */public abstract class AbstractRpcServer implements RpcServer{    protected Logger logger = LoggerFactory.getLogger(AbstractRpcServer.class);    // RpcServer的四个属性    protected String host;    protected Integer port;    protected ServiceRegistry serviceRegistry;    protected ServiceProvider serviceProvider;    // 服务扫描    public void scanService() {        String mainClassName = ReflectUtil.getStackTrace(); // 获得主类名        Class<?> startClass = null;        try {            startClass = Class.forName(mainClassName);            if (!startClass.isAnnotationPresent(ServiceScan.class)) {                logger.error("启动类少了@ServiceScan注解");                throw new RpcException(RpcError.SERVICE_SCAN_PACKAGE_NOT_FOUND);            }        } catch (ClassNotFoundException e) {            logger.error("无法找到主类", e);            e.printStackTrace();        }        String basePackage = startClass.getAnnotation(ServiceScan.class).value(); // 获取主类上ServiceScan注解的value属性值        if ("".equals(basePackage)) {            logger.info("basePackage为空字符串");            basePackage = mainClassName.substring(0, mainClassName.lastIndexOf("."));        }        Set<Class<?>> classSet = ReflectUtil.getClass(basePackage);        for (Class<?> clazz : classSet) {            if (clazz.isAnnotationPresent(Service.class)) {                String serviceName = clazz.getAnnotation(Service.class).name();                String group = clazz.getAnnotation(Service.class).group();                String version = clazz.getAnnotation(Service.class).version();                Object obj;                RpcServiceConfig rpcServiceConfig;                try {                    obj = clazz.newInstance();                    rpcServiceConfig = RpcServiceConfig.builder().service(obj).group(group).version(version).build();                } catch (InstantiationException | IllegalAccessException e) {                    logger.error("创建" + clazz + "时发生错误");                    continue;                }                if ("".equals(serviceName)) {                    logger.info("serviceName为空字符串");                    Class<?>[] interfaces = clazz.getInterfaces();                    for (Class<?> oneInterface : interfaces) {                        publishService(rpcServiceConfig, oneInterface.getCanonicalName() + group + version); // 服务具体实现类，该实现类上的接口                    }                } else {                    publishService(rpcServiceConfig, serviceName);                }            }        }    }    @Override    public void publishService(RpcServiceConfig rpcServiceConfig, String interfaceGroupVersionName) {        serviceProvider.addServiceProvide(rpcServiceConfig, interfaceGroupVersionName);        logger.info("client端已经向远程注册中心注册服务:" + interfaceGroupVersionName);        serviceRegistry.register(interfaceGroupVersionName, new InetSocketAddress(host, port)); // 在远程注册中心保存的也是interfaceGroupVersionName    }}