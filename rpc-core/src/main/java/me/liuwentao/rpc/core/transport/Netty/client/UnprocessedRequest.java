package me.liuwentao.rpc.core.transport.Netty.client;import me.liuwentao.rpc.common.Entity.RpcRequest;import me.liuwentao.rpc.common.Entity.RpcResponse;import java.util.concurrent.CompletableFuture;import java.util.concurrent.ConcurrentHashMap;/** * Created by liuwentao on 2021/7/5 20:48 */public class UnprocessedRequest {    // 对request消息的一些管理    private static final ConcurrentHashMap<String, CompletableFuture<RpcResponse>> unprocessedRequestFuture =            new ConcurrentHashMap<>(); // <requestId, CompletableFuture<RpcResponse>> 每一个requestId对应的RpcResponse是否成功返回    // put, remove, complete    public void put(String requestId, CompletableFuture<RpcResponse> future) {        unprocessedRequestFuture.put(requestId, future);    }    public void remove(String requestId) {        unprocessedRequestFuture.remove(requestId);    }    public void complete(RpcResponse rpcResponse) {        CompletableFuture<RpcResponse> future = unprocessedRequestFuture.remove(rpcResponse.getRequestId());        if (null != future) {            future.complete(rpcResponse);        } else {            throw new IllegalStateException();        }    }}